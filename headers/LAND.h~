#ifndef LAND_H
#define LAND_H

#include "Pos.h"
#include <cmath>
#include <cassert>

struct LAND_OBJECT
{
    enum collision_type
    {
	NO_COLLISION = 0,
	ELASTIC_COLLISION = 1,
	LANDING_COLLISION = 2
    };
    
    virtual int isCollision(PosXY& , PosXY& prevPos) = 0;
    // Checks for collision and resets position
    // to non-collision point.
    // Returns 0 if no collision
    // Returns 1 if collision
    // Returns 2 if collision with landing
    
    static float elevation;
    
    virtual ~LAND_OBJECT() {}
};

float LAND_OBJECT::elevation = 0.0001;

struct LO_FLAT_FLOOR : public LAND_OBJECT
{
    float Y;
    RangeX X;
    
    LO_FLAT_FLOOR(float x1, float x2, float Y):
    X( x1, x2 ) , Y(Y)
    {}
    
    int isCollision(PosXY& c , PosXY& prevPos)
    {
	if(c.X==X && c.Y <= Y)
	{
	    c.Y = Y + elevation;
	    return LANDING_COLLISION;
	}
	else return NO_COLLISION;
    }
};

struct LO_FLAT_CEIL :public LAND_OBJECT
{
    RangeX X;
    float Y;
    
    LO_FLAT_CEIL(float x1, float x2, float y1):
    X(x1,x2), Y(y1) {}
    
    int isCollision(PosXY& r , PosXY& prevPos)
    {
	if(r.X==X && r.Y >= Y)
	{
	    r.Y = Y - elevation;
	    return ELASTIC_COLLISION;
	}
	else return NO_COLLISION;
    }
};

struct LO_FLAT_WALL_LEFT :public LAND_OBJECT
{
    RangeX Y;
    float X;
    
    LO_FLAT_WALL_LEFT(float x1, float y1, float y2):
    X(x1), Y(y1,y2) {}
    
    int isCollision(PosXY& r , PosXY& prevPos)
    {
	if(r.Y==Y && r.X <= X)
	{
	    r.X = X + elevation;
	    return ELASTIC_COLLISION;
	}
	else return NO_COLLISION;
    }
    
};

struct LO_FLAT_WALL_RIGHT :public LAND_OBJECT
{
    RangeX Y;
    float X;
    
    LO_FLAT_WALL_RIGHT(float x1, float y1, float y2):
    X(x1), Y(y1,y2) {}
    
    int isCollision(PosXY& r , PosXY& prevPos)
    {
	if(r.Y==Y && r.X >= X)
	{
	    r.X = X - elevation;
	    return ELASTIC_COLLISION;
	}
	else return NO_COLLISION;
    }
    
};

struct LO_FLAT_RECT : public LAND_OBJECT
{
    RangeX X,Y;
    
    LO_FLAT_RECT(float a1, float a2, float b1, float b2):
    X(a1,a2), Y(b1,b2) {}
    
    int isCollision(PosXY& c , PosXY& prevPos)
    {         
	if(c.X==X && c.Y==Y)
	{
	    if(prevPos.X==X)
	    {
		/*
		if(prevPos.Y < Y.lower)
		{
		    return ELASTIC_COLLISION;
		}
		else */if(prevPos.Y > Y.upper)
		{
		    c.X = X.upper + elevation;
		    return LANDING_COLLISION;
		}
		else return ELASTIC_COLLISION;
	    }
	    else return ELASTIC_COLLISION;
	    /*
	    if(prevPos.Y==Y)
	    {
	    
	    }*/
	    /*
	    float dist_x1 = std::abs(X.lower - c.X);
	    float dist_x2 = std::abs(X.upper - c.X);
	    float dist_y1 = std::abs(Y.lower - c.Y);
	    float dist_y2 = std::abs(Y.upper - c.Y);
	    
	    if( Util::min(dist_x1,dist_x2,dist_y1,dist_y2) == dist_x1)
	    {
		c.X = X.lower - elevation;
		return ELASTIC_COLLISION;
	    }
	    else if( Util::min(dist_x1,dist_x2,dist_y1,dist_y2) == dist_x2)
	    {
		c.X = X.upper + elevation;
		return LANDING_COLLISION;
	    }
	    else if( Util::min(dist_x1,dist_x2,dist_y1,dist_y2) == dist_y1)
	    {
		c.Y = Y.lower - elevation;
		return ELASTIC_COLLISION;
	    }
	    else if( Util::min(dist_x1,dist_x2,dist_y1,dist_y2) == dist_y2)
	    {
		c.X = Y.upper + elevation;
		return ELASTIC_COLLISION;
	    }
	    else assert( false );
	    */
	}
	else return NO_COLLISION;
    }
};

#endif